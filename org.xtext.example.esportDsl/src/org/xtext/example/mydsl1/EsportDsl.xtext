// automatically generated by Xtext
grammar org.xtext.example.mydsl1.EsportDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/eSport" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Root returns Root:
		(
			zones+=Zone |
			tournaments+=Tournament |
			leagues+=League |
			teams+=Team |
			persons+=Person |
			qualifications+=Qualification |
			countries+=Country
		)*;

Person returns Person:
	Player | Coach;

Zone returns Zone:
	{Zone}
	'Zone'
	name=EString
	':'
		'(' countries+=Country ( "," countries+=Country)* ')'
		('(' teams+=Team ( "," teams+=Team)* ')' )?;

Tournament returns Tournament:
	{Tournament}
	'Tournament'
	name=EString
	':'
		size=EInt
		type=TournamentType
		year=EInt
		'(' allowedZones+=[Zone|EString] ( "," allowedZones+=[Zone|EString])* ')'
		('(' countries+=[Country|EString] ( "," countries+=[Country|EString])* ')' )?
		('qualifiesFor' qualifiesFor=[Qualification|EString])?
		('qualifiesFrom' '(' qualifiesFrom+=[Qualification|EString] ( "," qualifiesFrom+=[Qualification|EString])* ')' )?
		('(' finalstages+=FinalStage ( "," finalstages+=FinalStage)* ')' )?
		('(' groupstages+=GroupStage ( "," groupstages+=GroupStage)* ')' )?;

League returns League:
	{League}
	'League'
	name=EString
	":"
		size=EInt
		year=EInt
		season=Season
		(zone=[Zone|EString])?
		('(' qualifiesFor+=[Qualification|EString] ( "," qualifiesFor+=[Qualification|EString])* ')' )?
		(groupstage=GroupStage)?;

Team returns Team:
	{Team}
	'Team'
	name=EString
	':'
		championshipPoints=EInt
		(coach=Coach)?
		'(' players+=Player ( "," players+=Player)* ')';

Qualification returns Qualification:
	{Qualification}
	'Qualification'
	name=EString;

EString returns ecore::EString:
	STRING | ID;

Country returns Country:
	{Country}
	'Country'
	name=EString;

EInt returns ecore::EInt:
	'-'? INT;

enum TournamentType returns TournamentType:
				worlds = 'worlds' | regionals = 'regionals' | allStars = 'allStars' | promotion = 'promotion' | midSeasonInvitational = 'midSeasonInvitational' | riftRivals = 'riftRivals' | playOff = 'playOff';

FinalStage returns FinalStage:
	{FinalStage}
	'FinalStage'
	':'
		maxNbGames=EInt
		'(' teams+=[Team|EString] ( "," teams+=[Team|EString])* ')'
		('matchs' '(' matchs+=Match ( "," matchs+=Match)* ')' )?;

GroupStage returns GroupStage:
	{GroupStage}
	'GroupStage'
	':'
		type=GroupStageType
		maxNbGames=EInt
		meetingsInSameGroup=EInt
		(meetingsWithOtherGroups=EInt)?
		('(' groups+=Group ( "," groups+=Group)* ')' )?;

Match returns Match:
	{Match}
	'Match'
	':'
		type=MatchType
		loserWins=EInt
		teamWinner=[Team|EString]
		teamLoser=[Team|EString];

enum MatchType returns MatchType:
				group = 'group' | final = 'final' | semiFinal = 'semiFinal' | quarterFinal = 'quarterFinal' | singleRoundElimination = 'singleRoundElimination';

Group returns Group:
	{Group}
	'Group'
	':'
		'(' teams+=[Team|EString] ( "," teams+=[Team|EString])* ')'
		('(' matchs+=Match ( "," matchs+=Match)* ')' )?;

enum GroupStageType returns GroupStageType:
				league = 'league' | worldsPlayIn = 'worldsPlayIn' | worldsGroup = 'worldsGroup' | riftRivalsGroup = 'riftRivalsGroup' | msiPlayIn = 'msiPlayIn' | msiGroup = 'msiGroup' | allStarsGroup = 'allStarsGroup';

enum Season returns Season:
				spring = 'spring' | summer = 'summer';

Player returns Player:
	{Player}
	'Player'
	name=EString
	':'
		age=EInt
		country=[Country|EString]
		(position=Position)?
		(description=EString)?
		('(' capacities+=Capacity ( "," capacities+=Capacity)* ')' )?;

Coach returns Coach:
	{Coach}
	'Coach'
	name=EString
	':'
		age=EInt
		country=[Country|EString]
		(description=EString)?
		('(' capacities+=Capacity ( "," capacities+=Capacity)* ')' )?;

Capacity returns Capacity:
	{Capacity}
	'Capacity'
	':'
		type=CapacityType
		value=EInt;

enum Position returns Position:
				attackDamageCarry = 'attackDamageCarry' | support = 'support' | midLane = 'midLane' | topLane = 'topLane' | jungle = 'jungle';

enum CapacityType returns CapacityType:
				positioning = 'positioning' | stressManagement = 'stressManagement' | playmakingMechanics = 'playmakingMechanics' | escapeMechanics = 'escapeMechanics' | patience = 'patience' | farm = 'farm' | steal = 'steal' | splitPush = 'splitPush' | teamPlay = 'teamPlay' | aggressivity = 'aggressivity' | leadership = 'leadership' | draft = 'draft' | pathing = 'pathing' | awareness = 'awareness' | experience = 'experience' | objectivePlay = 'objectivePlay' | metaGame = 'metaGame';
